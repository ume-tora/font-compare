class FontComparator {
    constructor() {
        this.fontCategories = {
            '„Ç¥„Ç∑„ÉÉ„ÇØ‰Ωì': [
                'Hiragino Sans',
                'Hiragino Kaku Gothic ProN',
                'Yu Gothic',
                'Yu Gothic UI',
                'Meiryo',
                'MS Gothic',
                'Noto Sans JP',
                'Source Han Sans JP',
                'BIZ UDPGothic',
                'Zen Kaku Gothic New',
                'Zen Kaku Gothic Antique',
                'Sawarabi Gothic',
                'Kosugi',
                'Kosugi Maru'
            ],
            'ÊòéÊúù‰Ωì': [
                'Hiragino Mincho ProN',
                'Yu Mincho',
                'MS Mincho',
                'Noto Serif JP',
                'Source Han Serif JP',
                'BIZ UDPMincho',
                'Zen Antique',
                'Zen Antique Soft',
                'Sawarabi Mincho',
                'Shippori Mincho',
                'Shippori Mincho B1'
            ],
            '‰∏∏„Ç¥„Ç∑„ÉÉ„ÇØ': [
                'Hiragino Maru Gothic ProN',
                'Kosugi Maru',
                'Zen Maru Gothic',
                'Rounded Mgen+',
                'M PLUS Rounded 1c',
                'Hachi Maru Pop'
            ],
            'ÊâãÊõ∏„ÅçÈ¢®': [
                'Klee One',
                'Yuji Syuku',
                'Yuji Mai',
                'Yuji Boku',
                'Amatic SC',
                'Caveat',
                'Kalam',
                'Architects Daughter'
            ],
            '„Éù„ÉÉ„Éó„Éª„Éá„Ç∂„Ç§„É≥': [
                'Stick',
                'Reggae One',
                'Rampart One',
                'Yusei Magic',
                'DotGothic16',
                'Train One',
                'Kaisei Tokumin',
                'Kaisei HarunoUmi',
                'Kaisei Opti',
                'Kaisei Decol'
            ],
            '„É¢„Éé„Çπ„Éö„Éº„Çπ': [
                'Courier New',
                'Consolas',
                'Monaco',
                'Menlo',
                'Source Code Pro',
                'Fira Code',
                'Inconsolata',
                'Roboto Mono'
            ]
        };
        
        this.sampleTexts = [
            '„ÅÇ„ÅÆ„Ç§„Éº„Éè„Éà„Éº„É¥„Ç©„ÅÆ„Åô„Åç„Å®„Åä„Å£„ÅüÈ¢®„ÄÅÂ§è„Åß„ÇÇÂ∫ï„Å´ÂÜ∑„Åü„Åï„Çí„ÇÇ„Å§Èùí„ÅÑ„Åù„Çâ',
            'The quick brown fox jumps over the lazy dog',
            '„ÅÑ„Çç„ÅØ„Å´„Åª„Å∏„Å® „Å°„Çä„Å¨„Çã„Çí „Çè„Åã„Çà„Åü„Çå„Åù „Å§„Å≠„Å™„Çâ„ÇÄ',
            '„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰∏ñÁïåÔºÅHello, World! 123456789',
            'Áæé„Åó„ÅÑÊó•Êú¨Ë™û„ÅÆ„Çø„Ç§„Éù„Ç∞„É©„Éï„Ç£',
            '„Éï„Ç©„É≥„ÉàÊØîËºÉ„ÉÑ„Éº„É´ - Font Comparison Tool'
        ];
        
        this.currentCategory = '„Åô„Åπ„Å¶';
        this.isDarkMode = false;
        
        this.textInput = document.getElementById('textInput');
        this.fontGrid = document.getElementById('fontGrid');
        this.fontSizeSlider = document.getElementById('fontSize');
        this.fontSizeValue = document.getElementById('fontSizeValue');
        this.fontWeightSelect = document.getElementById('fontWeight');
        this.themeToggle = document.getElementById('themeToggle');
        this.sampleSelect = document.getElementById('sampleSelect');
        this.categoryBtns = document.querySelectorAll('.category-btn');
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.populateSampleTexts();
        this.renderFonts();
        this.updateFontSize();
        this.loadTheme();
    }
    
    setupEventListeners() {
        this.textInput.addEventListener('input', () => this.updateText());
        this.fontSizeSlider.addEventListener('input', () => this.updateFontSize());
        this.fontWeightSelect.addEventListener('change', () => this.updateFontWeight());
        this.themeToggle.addEventListener('click', () => this.toggleTheme());
        this.sampleSelect.addEventListener('change', () => this.selectSampleText());
        
        this.categoryBtns.forEach(btn => {
            btn.addEventListener('click', (e) => this.filterByCategory(e.target.dataset.category));
        });
    }
    
    populateSampleTexts() {
        this.sampleTexts.forEach((text, index) => {
            const option = document.createElement('option');
            option.value = text;
            option.textContent = text.substring(0, 30) + (text.length > 30 ? '...' : '');
            this.sampleSelect.appendChild(option);
        });
    }
    
    selectSampleText() {
        if (this.sampleSelect.value) {
            this.textInput.value = this.sampleSelect.value;
            this.updateText();
        }
    }
    
    filterByCategory(category) {
        this.currentCategory = category;
        
        this.categoryBtns.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.category === category);
        });
        
        this.renderFonts();
    }
    
    toggleTheme() {
        this.isDarkMode = !this.isDarkMode;
        document.body.classList.toggle('dark-mode', this.isDarkMode);
        this.themeToggle.textContent = this.isDarkMode ? '‚òÄÔ∏è' : 'üåô';
        localStorage.setItem('darkMode', this.isDarkMode);
    }
    
    loadTheme() {
        const savedTheme = localStorage.getItem('darkMode');
        if (savedTheme === 'true') {
            this.isDarkMode = true;
            document.body.classList.add('dark-mode');
            this.themeToggle.textContent = '‚òÄÔ∏è';
        }
    }
    
    renderFonts() {
        this.fontGrid.innerHTML = '';
        
        let fontsToShow = [];
        
        if (this.currentCategory === '„Åô„Åπ„Å¶') {
            Object.values(this.fontCategories).forEach(categoryFonts => {
                fontsToShow = fontsToShow.concat(categoryFonts);
            });
        } else {
            fontsToShow = this.fontCategories[this.currentCategory] || [];
        }
        
        fontsToShow.forEach(font => {
            const fontSample = this.createFontSample(font, this.currentCategory !== '„Åô„Åπ„Å¶' ? this.currentCategory : this.getFontCategory(font));
            this.fontGrid.appendChild(fontSample);
        });
    }
    
    getFontCategory(fontName) {
        for (const [category, fonts] of Object.entries(this.fontCategories)) {
            if (fonts.includes(fontName)) {
                return category;
            }
        }
        return '„Åù„ÅÆ‰ªñ';
    }
    
    createFontSample(fontName, category) {
        const sampleDiv = document.createElement('div');
        sampleDiv.className = 'font-sample';
        
        const headerDiv = document.createElement('div');
        headerDiv.className = 'font-header';
        headerDiv.innerHTML = `${fontName} <span class="category-tag">${category}</span>`;
        
        const previewDiv = document.createElement('div');
        previewDiv.className = 'font-preview';
        previewDiv.style.fontFamily = `"${fontName}", sans-serif`;
        previewDiv.style.fontSize = `${this.fontSizeSlider.value}px`;
        previewDiv.style.fontWeight = this.fontWeightSelect.value;
        previewDiv.textContent = this.textInput.value || '„ÅÇ„ÅÆ„Ç§„Éº„Éè„Éà„Éº„É¥„Ç©„ÅÆ„Åô„Åç„Å®„Åä„Å£„ÅüÈ¢®„ÄÅÂ§è„Åß„ÇÇÂ∫ï„Å´ÂÜ∑„Åü„Åï„Çí„ÇÇ„Å§Èùí„ÅÑ„Åù„Çâ';
        
        const infoDiv = document.createElement('div');
        infoDiv.className = 'font-info';
        
        const fontInfo = document.createElement('span');
        fontInfo.textContent = `„Éï„Ç©„É≥„Éà: ${fontName}`;
        
        const copyBtn = document.createElement('button');
        copyBtn.className = 'copy-btn';
        copyBtn.textContent = 'CSS „Ç≥„Éî„Éº';
        copyBtn.addEventListener('click', () => this.copyFontCSS(fontName));
        
        infoDiv.appendChild(fontInfo);
        infoDiv.appendChild(copyBtn);
        
        sampleDiv.appendChild(headerDiv);
        sampleDiv.appendChild(previewDiv);
        sampleDiv.appendChild(infoDiv);
        
        return sampleDiv;
    }
    
    updateText() {
        const newText = this.textInput.value || '„ÅÇ„ÅÆ„Ç§„Éº„Éè„Éà„Éº„É¥„Ç©„ÅÆ„Åô„Åç„Å®„Åä„Å£„ÅüÈ¢®„ÄÅÂ§è„Åß„ÇÇÂ∫ï„Å´ÂÜ∑„Åü„Åï„Çí„ÇÇ„Å§Èùí„ÅÑ„Åù„Çâ';
        const previews = document.querySelectorAll('.font-preview');
        previews.forEach(preview => {
            preview.textContent = newText;
        });
    }
    
    updateFontSize() {
        const size = this.fontSizeSlider.value;
        this.fontSizeValue.textContent = `${size}px`;
        
        const previews = document.querySelectorAll('.font-preview');
        previews.forEach(preview => {
            preview.style.fontSize = `${size}px`;
        });
    }
    
    updateFontWeight() {
        const weight = this.fontWeightSelect.value;
        const previews = document.querySelectorAll('.font-preview');
        previews.forEach(preview => {
            preview.style.fontWeight = weight;
        });
    }
    
    copyFontCSS(fontName) {
        const cssText = `font-family: "${fontName}", sans-serif;`;
        
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(cssText).then(() => {
                this.showCopyNotification('CSS„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ');
            }).catch(() => {
                this.fallbackCopy(cssText);
            });
        } else {
            this.fallbackCopy(cssText);
        }
    }
    
    fallbackCopy(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showCopyNotification('CSS„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ');
        } catch (err) {
            console.error('„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', err);
            this.showCopyNotification('„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãï„Åß„Ç≥„Éî„Éº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', true);
        }
        
        document.body.removeChild(textArea);
    }
    
    showCopyNotification(message, isError = false) {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${isError ? '#e74c3c' : '#27ae60'};
            color: white;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 600;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease-out;
        `;
        
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                if (style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            }, 300);
        }, 3000);
    }
    
    addCustomFont(fontName) {
        if (!this.fonts.includes(fontName)) {
            this.fonts.push(fontName);
            this.renderFonts();
            this.updateText();
            this.updateFontSize();
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new FontComparator();
});